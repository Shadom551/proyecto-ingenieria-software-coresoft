@page "/seleccion-box/{day}-{month}-{year}/{timeSlot}"
@using HospitalBoxManager.Data
@inject DataLibrary.DataAccess DataAccess
@inject NavigationManager Navigation
@using System.Globalization

<div class="page-container">
    <div class="content-area">
        @if (isLoading)
        {
            <div class="loading-indicator">Cargando disponibilidad...</div>
        }
        else
        {
            <div class="box-selection-box">
                <h1 class="title">PASILLO PEDIATRÍA 1</h1>
                <p class="instruction-text">HAGA CLICK PARA VER EL DETALLE DE CADA BOX</p>

                <div class="availability-legend">
                    <div class="legend-item">
                        <div class="legend-color unavailable"></div>
                        <span>NO DISPONIBLE</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color available"></div>
                        <span>DISPONIBLE</span>
                    </div>
                    <div class="legend-item">
                        <div class="legend-color maintenance"></div>
                        <span>EN MANTENIMIENTO</span>
                    </div>
                </div>

                <div class="date-display">@Day de @Month @Year - @TimeSlot</div>

                <div class="box-grid">
                    @for (int row = 0; row < 8; row++)
                    {
                        <div class="box-row">
                            @for (int col = 1; col <= 7; col++)
                            {
                                var boxNumber = row * 7 + col;
                                var boxStatus = GetBoxStatus(boxNumber);

                                <div class="box @boxStatus" @onclick="() => SelectBox(boxNumber)">
                                    BOX @boxNumber
                                    @if (boxStatus == "unavailable" && GetAssignedDoctor(boxNumber) != null)
                                    {
                                        <div class="assigned-doctor">
                                            @GetAssignedDoctor(boxNumber)?.Nombre
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Day { get; set; }
    [Parameter] public string Month { get; set; }
    [Parameter] public string Year { get; set; }
    [Parameter] public string TimeSlot { get; set; }

    private bool isLoading = true;
    private List<int> availableBoxes = new();
    private List<int> maintenanceBoxes = new();
    private List<ConsultaMedica> occupiedConsultas = new();
    private List<Medico> doctors = new();
    private DateTime selectedDate;
    private TimeSpan timeSlotStart;
    private TimeSpan timeSlotEnd;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Console.WriteLine($"📅 Parsing fecha: {Day}-{Month}-{Year}, slot: {TimeSlot}");

            var culture = new CultureInfo("es-ES");
            var monthNumber = DateTime.ParseExact(Month, "MMMM", culture).Month;
            selectedDate = new DateTime(int.Parse(Year), monthNumber, int.Parse(Day));

            var timeParts = TimeSlot.Split('-');
            timeSlotStart = TimeSpan.Parse(timeParts[0]);
            timeSlotEnd = TimeSpan.Parse(timeParts[1]);

            Console.WriteLine($"📌 Fecha completa: {selectedDate}, de {timeSlotStart} a {timeSlotEnd}");

            var loadTasks = new[]
            {
                LoadAvailableBoxes(),
                LoadMaintenanceBoxes(),
                LoadOccupiedConsultas(),
                LoadDoctors()
            };

            await Task.WhenAll(loadTasks);
            Console.WriteLine("✅ Todos los datos cargados correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error general en OnInitializedAsync: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAvailableBoxes()
    {
        try
        {
            string sql = @"
                SELECT b.idBox
                FROM Box b
                LEFT JOIN ConsultaMedica c ON b.idBox = c.idBox
                    AND (
                        c.FechaInicio < @EndTime
                        AND c.FechaFinal > @StartTime
                    )
                WHERE b.estado = 'Disponible'
                    AND c.idBox IS NULL";

            var start = selectedDate.Add(timeSlotStart);
            var end = selectedDate.Add(timeSlotEnd);

            Console.WriteLine($"🟦 LoadAvailableBoxes: Start = {start}, End = {end}");

            availableBoxes = await DataAccess.LoadData<int, dynamic>(
                sql,
                new { StartTime = start, EndTime = end });

            Console.WriteLine($"✔ Boxes disponibles: {availableBoxes.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error en LoadAvailableBoxes: {ex.Message}");
        }
    }

    private async Task LoadMaintenanceBoxes()
    {
        string sql = @"SELECT idBox FROM Box WHERE estado = 'Mantenimiento'";
        maintenanceBoxes = await DataAccess.LoadData<int, dynamic>(sql, new { });
    }

    private async Task LoadOccupiedConsultas()
    {
        try
        {
            string sql = @"
                SELECT c.*, m.*
                FROM ConsultaMedica c
                JOIN Medico m ON c.IdMedico = m.IdMedico
                WHERE c.FechaInicio < @EndTime
                  AND c.FechaFinal > @StartTime";

            var start = selectedDate.Add(timeSlotStart);
            var end = selectedDate.Add(timeSlotEnd);

            Console.WriteLine($"🟧 LoadOccupiedConsultas: {start} - {end}");

            var results = await DataAccess.LoadData<ConsultaMedica, Medico, ConsultaMedica, dynamic>(
                sql,
                (consulta, medico) =>
                {
                    consulta.Medico = medico;
                    return consulta;
                },
                new { StartTime = start, EndTime = end },
                splitOn: "IdMedico"
            );

            occupiedConsultas = results.ToList();
            Console.WriteLine($"✔ Consultas ocupadas: {occupiedConsultas.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ Error en LoadOccupiedConsultas: {ex.Message}");
        }
    }

    private async Task LoadDoctors()
    {
        string sql = "SELECT * FROM Medico";
        doctors = await DataAccess.LoadData<Medico, dynamic>(sql, new { });
    }

    private string GetBoxStatus(int boxNumber)
    {
        if (maintenanceBoxes.Contains(boxNumber)) return "maintenance";
        if (occupiedConsultas.Any(c => c.IdBox == boxNumber)) return "unavailable";
        if (availableBoxes.Contains(boxNumber)) return "available";
        return "unavailable";
    }

    private Medico? GetAssignedDoctor(int boxNumber)
    {
        return occupiedConsultas.FirstOrDefault(c => c.IdBox == boxNumber)?.Medico;
    }

    private void SelectBox(int boxNumber)
    {
        var status = GetBoxStatus(boxNumber);
        if (status == "available")
        {
            Navigation.NavigateTo($"/confirmar-box/{Day}-{Month}-{Year}/{TimeSlot}/{boxNumber}");
        }
    }
}


<style>
    .loading-indicator {
        padding: 2rem;
        background-color: #e6e3dc;
        border-radius: 10px;
        text-align: center;
        font-size: 1.2rem;
    }

    /* Rest of your existing styles remain the same */
    .box-selection-box {
        width: 90%;
        max-width: 1000px;
        padding: 30px;
        background-color: #e6e3dc;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .title {
        color: #333;
        font-size: 1.8rem;
        text-align: center;
        margin-bottom: 10px;
    }

    .instruction-text {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    .availability-legend {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        border-radius: 4px;
    }

    .unavailable {
        background-color: #68c9fe;
    }

    .available {
        background-color: #273886;
    }

    .maintenance {
        background-color: #737373;
    }

    .date-display {
        font-size: 1.2rem;
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        font-weight: bold;
    }

    .box-grid {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .box-row {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
    }

    .box {
        padding: 15px;
        text-align: center;
        background-color: #d1c8c1;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .box:hover {
            transform: scale(1.05);
        }

    .available {
        background-color: #68c9fe;
        color: white;
    }

    .unavailable {
        background-color: #273886;
        color: white;
        cursor: not-allowed;
    }

    .maintenance {
        background-color: #737373;
        cursor: not-allowed;
    }

    .page-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background-color: #f5f4f2;
    }

    .content-area {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }
</style>