@page "/box-status"
@using HospitalBoxManager.Data
@inject DataLibrary.DataAccess DataAccess
@inject NavigationManager Navigation
@using System.Globalization

<div class="page-container">
    <div class="content-area">
        @if (isLoading)
        {
                <div class="loading-indicator">Cargando estado de boxes...</div>
        }
        else
        {
                <div class="box-selection-box">
                    <h1 class="title">ADMINISTRACIÓN DE ESTADO DE BOXES</h1>
                    <p class="instruction-text">HAGA CLICK PARA CAMBIAR EL ESTADO DEL BOX</p>

                    <div class="availability-legend">
                        <div class="legend-item">
                            <div class="legend-color unavailable"></div>
                            <span>OCUPADO</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color available"></div>
                            <span>DISPONIBLE</span>
                        </div>
                        <div class="legend-item">
                            <div class="legend-color maintenance"></div>
                            <span>EN MANTENIMIENTO</span>
                        </div>
                    </div>

                    <div class="box-grid">
                    @for (int row = 0; row < 8; row++)
                    {
                                <div class="box-row">
                            @for (int col = 1; col <= 7; col++)
                            {
                                var boxNumber = row * 7 + col;
                                var boxStatus = GetBoxStatus(boxNumber);

                                            <div class="box @boxStatus" @onclick="() => ToggleBoxStatus(boxNumber)">
                                                BOX @boxNumber

                                            </div>
                            }
                                </div>
                    }
                    </div>
                </div>
        }
    </div>
</div>

@code {
    private bool isLoading = true;
    private List<int> availableBoxes = new();
    private List<int> maintenanceBoxes = new();
    private List<int> occupiedBoxes = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var loadTasks = new[]
            {
                LoadAvailableBoxes(),
                LoadMaintenanceBoxes(),
                LoadOccupiedBoxes()
            };

            await Task.WhenAll(loadTasks);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading box status: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAvailableBoxes()
    {
        string sql = "SELECT idBox FROM Box WHERE estado = 'Disponible'";
        availableBoxes = await DataAccess.LoadData<int, dynamic>(sql, new { });
    }

    private async Task LoadMaintenanceBoxes()
    {
        string sql = "SELECT idBox FROM Box WHERE estado = 'Mantenimiento'";
        maintenanceBoxes = await DataAccess.LoadData<int, dynamic>(sql, new { });
    }

    private async Task LoadOccupiedBoxes()
    {
        string sql = @"
            SELECT DISTINCT c.idBox 
            FROM ConsultaMedica c
            WHERE c.FechaInicio <= @Now AND c.FechaFinal >= @Now";

        occupiedBoxes = await DataAccess.LoadData<int, dynamic>(
            sql,
            new { Now = DateTime.Now });
    }

    private string GetBoxStatus(int boxNumber)
    {
        if (occupiedBoxes.Contains(boxNumber)) return "unavailable";
        if (maintenanceBoxes.Contains(boxNumber)) return "maintenance";
        if (availableBoxes.Contains(boxNumber)) return "available";
        return "unavailable";
    }

    private async Task ToggleBoxStatus(int boxNumber)
    {
        if (occupiedBoxes.Contains(boxNumber))
        {
            return;
        }

        string newStatus;
        if (maintenanceBoxes.Contains(boxNumber))
        {
            newStatus = "Disponible";
            maintenanceBoxes.Remove(boxNumber);
            availableBoxes.Add(boxNumber);
        }
        else
        {
            newStatus = "Mantenimiento";
            availableBoxes.Remove(boxNumber);
            maintenanceBoxes.Add(boxNumber);
        }

        string updateSql = "UPDATE Box SET estado = @Status WHERE idBox = @BoxId";
        await DataAccess.SaveData(updateSql, new { Status = newStatus, BoxId = boxNumber });
    }
}

<style>
    .loading-indicator {
        padding: 2rem;
        background-color: #e6e3dc;
        border-radius: 10px;
        text-align: center;
        font-size: 1.2rem;
    }

    .box-selection-box {
        width: 90%;
        max-width: 1000px;
        padding: 30px;
        background-color: #e6e3dc;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .title {
        color: #333;
        font-size: 1.8rem;
        text-align: center;
        margin-bottom: 10px;
    }

    .instruction-text {
        text-align: center;
        margin-bottom: 20px;
        color: #333;
    }

    .availability-legend {
        display: flex;
        justify-content: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    .legend-item {
        display: flex;
        align-items: center;
        gap: 5px;
    }

    .legend-color {
        width: 20px;
        height: 20px;
        border-radius: 4px;
    }

    .unavailable {
        background-color: #68c9fe;
    }

    .available {
        background-color: #273886;
    }

    .maintenance {
        background-color: #737373;
    }

    .date-display {
        font-size: 1.2rem;
        text-align: center;
        margin-bottom: 30px;
        color: #333;
        font-weight: bold;
    }

    .box-grid {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .box-row {
        display: grid;
        grid-template-columns: repeat(7, 1fr);
        gap: 10px;
    }

    .box {
        padding: 15px;
        text-align: center;
        background-color: #d1c8c1;
        border-radius: 5px;
        cursor: pointer;
        transition: all 0.2s;
    }

        .box:hover {
            transform: scale(1.05);
        }

    .available {
        background-color: #68c9fe;
        color: white;
    }

    .unavailable {
        background-color: #273886;
        color: white;
        cursor: not-allowed;
    }

    .maintenance {
        background-color: #737373;
        cursor: not-allowed;
    }

    .page-container {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        background-color: #f5f4f2;
    }

    .content-area {
        flex: 1;
        display: flex;
        justify-content: center;
        align-items: center;
        padding: 20px;
    }

    .box-status {
        font-size: 0.8rem;
        margin-top: 5px;
        font-weight: bold;
    }

    .available .box-status {
        color: white;
    }

    .unavailable .box-status {
        color: white;
    }

    .maintenance .box-status {
        color: white;
    }

    .unavailable {
        cursor: not-allowed;
    }
</style>